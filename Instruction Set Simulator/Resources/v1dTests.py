import unittest
from simpleCPU_v1d_SIM.processor_v1d import Processor_v1d as processor

class simpleCPUv1dTests(unittest.TestCase):
    
    def testAdd(self):
        cpu = processor()
        cpu.loadMem('Resources/tests/v1dTests/v1d_add_test.dat')
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0001",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xff81",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xff80",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xff00",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0feff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0001",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xff80",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xff7f",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xff7e",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0xfff1",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0xfff1",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0xfff1",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0xfff1",16))
        cpu.execute()
        
    def testAnd(self):
        cpu = processor()
        cpu.loadMem('Resources/tests/v1dTests/v1d_and_test.dat')
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0055",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0055",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0050",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x007f",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x005f",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0055",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0055",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x00ff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x007f",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x000f",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0xff80",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0xff01",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x0001",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x0001",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x0001",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x0001",16))
        
    def testJump(self):
        cpu = processor()
        cpu.loadMem('Resources/tests/v1dTests/v1d_jump_test.dat')
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x001",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x002",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x010",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x011",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x012",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00c",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00d",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00e",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x008",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x009",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00a",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x004",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x005",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x006",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x014",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x015",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x016",16))
        
    def testMem(self):
        cpu = processor()
        cpu.loadMem('Resources/tests/v1dTests/v1d_mem_test.dat')
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xfff0",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xfff0",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xfff0",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffef",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffee",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffde",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffdd",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffcd",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffcc",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffcc",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0001",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0011",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0012",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0022",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0023",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0033",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0034",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0034",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0034",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0034",16))
        
    def testMove(self):
        cpu = processor()
        cpu.loadMem('Resources/tests/v1dTests/v1d_move_test.dat')
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x007f",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x007f",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xff80",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0xff80",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0001",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x0001",16))
        
    def testReg(self):
        cpu = processor()
        cpu.loadMem('Resources/tests/v1dTests/v1d_register_test.dat')
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x007f",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0045",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0xfffe",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xfffe",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0xfffe",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0xfffe",16))
        
    def testRol(self):
        cpu = processor()
        cpu.loadMem('Resources/tests/v1dTests/v1d_rol_test.dat')
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x007f",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x00fe",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x01fc",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x03f8",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x07f0",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x000f",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x001e",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x003c",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0078",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x00f0",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x01e0",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x03c0",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0780",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0f00",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x1e00",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x3c00",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x7800",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xf000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0001",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0010",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0002",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x000f",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0004",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x000e",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0008",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x000d",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0010",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x000c",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0020",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x000b",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0040",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x000a",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0080",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0009",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0100",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0008",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0200",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0007",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0400",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0006",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0800",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0005",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x1000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0004",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x2000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0003",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x4000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0002",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x8000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0001",16))
        cpu.execute()
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0001",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0000",16))
        
    def testSub(self):
        cpu = processor()
        cpu.loadMem('Resources/tests/v1dTests/v1d_sub_test.dat')
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x007f",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0080",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0100",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0101",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0001",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0001",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0080",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0081",16))
        cpu.execute()
        self.assertEqual(cpu.registers[2], int("0x0082",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x0000",16))
        cpu.execute()
        self.assertEqual(cpu.registers[3], int("0x000f",16))
        
    def testSubroutine(self):
        cpu = processor()
        cpu.loadMem('Resources/tests/v1dTests/v1d_subroutine_test.dat')
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x001",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x003",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x004",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x007",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x008",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00b",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00c",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00f",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x010",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x013",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x014",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x011",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x012",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00d",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00e",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x009",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00a",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x005",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x006",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x011",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x012",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00d",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00e",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x009",16))
        cpu.execute()
        self.assertEqual(cpu.programCounter, int("0x00a",16))
        
    def testXor(self):
        cpu = processor()
        cpu.loadMem('Resources/tests/v1dTests/v1d_xor_test.dat')
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0055",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0xffaa",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[1], int("0xffa9",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0056",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0xffff",16))
        cpu.execute()
        self.assertEqual(cpu.registers[0], int("0x0056",16))
        
        
if __name__ == '__main__':
    unittest.main()